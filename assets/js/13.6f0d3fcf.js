(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{304:function(e,t,a){"use strict";a.r(t);var n=a(38),o=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"configer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configer","aria-hidden":"true"}},[e._v("#")]),e._v(" Configer")]),e._v(" "),a("p",[a("code",[e._v("Configer")]),e._v(" provides Webpack configuration for Vapper. We introduced Vapper only responsible for the "),a("router-link",{attrs:{to:"/introduction.html#necessary-webpack-configuration"}},[e._v("necessary webpack configuration")]),e._v(", which makes Vapper a configuration-independent framework.")],1),e._v(" "),a("h2",{attrs:{id:"vapper-configer-vue-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vapper-configer-vue-cli","aria-hidden":"true"}},[e._v("#")]),e._v(" @vapper/configer-vue-cli")]),e._v(" "),a("p",[e._v("This is "),a("code",[e._v("Vapper")]),e._v("'s default "),a("code",[e._v("Configer")]),e._v(", which reads "),a("code",[e._v("@vue/cli-service")]),e._v(" installed under the current project and uses it to resolve the corresponding "),a("code",[e._v("Webpack")]),e._v(" configuration. So "),a("code",[e._v("Vapper")]),e._v(" can be used with "),a("code",[e._v("Vue CLI")]),e._v(", the benefits of doing this are two-way: "),a("code",[e._v("Vapper")]),e._v(" has all the "),a("code",[e._v("Vue CLI")]),e._v(" capabilities, and "),a("code",[e._v("Vapper")]),e._v(" provides server-side rendering for "),a("code",[e._v("Vue CLI")]),e._v(".")]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[e._v("Since this is "),a("code",[e._v("vapper")]),e._v(" default "),a("code",[e._v("Configer")]),e._v(", usually you don't need to install it manually.")])]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("yarn add @vapper/configer-vue-cli -D\n")])])]),a("h2",{attrs:{id:"vapper-configer-poi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vapper-configer-poi","aria-hidden":"true"}},[e._v("#")]),e._v(" @vapper/configer-poi")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://poi.js.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Poi"),a("OutboundLink")],1),e._v(" is also an excellent "),a("code",[e._v("Webpack")]),e._v(" management tool. If your project uses "),a("code",[e._v("Poi")]),e._v(", it will be easy to integrate with "),a("code",[e._v("Vapper")]),e._v(". You can view: "),a("router-link",{attrs:{to:"/usage.html#integrated-into-the-poi-project"}},[e._v("Usage - integrated into Poi project")]),e._v(" for details.")],1),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("yarn add @vapper/configer-poi -D\n")])])]),a("h2",{attrs:{id:"writing-configer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-configer","aria-hidden":"true"}},[e._v("#")]),e._v(" Writing Configer")]),e._v(" "),a("p",[e._v("As the official documentation describes: "),a("a",{attrs:{href:"https://ssr.vuejs.org/guide/structure.html#introducing-a-build-step",target:"_blank",rel:"noopener noreferrer"}},[e._v("Introducing a Build Step"),a("OutboundLink")],1),e._v(". We need two "),a("code",[e._v("Webpack")]),e._v(" configurations, one to build the server bundle and the other to build the client bundle. So a "),a("code",[e._v("Configer")]),e._v(" is essentially a class that contains the "),a("code",[e._v("getServerConfig")]),e._v(" method and the "),a("code",[e._v("getClientConfig")]),e._v(" method:")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{attrs:{class:"token class-name"}},[e._v("MyOwnConfiger")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{attrs:{class:"token function"}},[e._v("getServerConfig")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{attrs:{class:"token operator"}},[e._v("...")]),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v("  "),a("span",{attrs:{class:"token comment"}},[e._v("// Return server configuration")]),e._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n  "),a("span",{attrs:{class:"token function"}},[e._v("getClientConfig")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{attrs:{class:"token operator"}},[e._v("...")]),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v("  "),a("span",{attrs:{class:"token comment"}},[e._v("// Return client configuration")]),e._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("This class will be instantiated internally by "),a("code",[e._v("Vapper")]),e._v(" and call the two methods above. As long as these two methods return the correct "),a("code",[e._v("Webpack")]),e._v(" configuration object, "),a("code",[e._v("Vapper")]),e._v(" can use it correctly to build the project. This means that you can implement your own "),a("code",[e._v("Configer")]),e._v(", which does not depend on any "),a("code",[e._v("Webpack")]),e._v(" management tools (eg "),a("code",[e._v("Vue CLI")]),e._v(" or "),a("code",[e._v("Poi")]),e._v(").")]),e._v(" "),a("p",[e._v("Vapper will check the project's package.json file and automatically load the first Configer it finds. So in order for Vapper to recognize whether a package is a Configer, we need to stipulate the name of the package. The following is some legal naming convention:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("@vapper/configer-xxxx")]),e._v(": Official "),a("code",[e._v("Configer")])]),e._v(" "),a("li",[a("code",[e._v("vapper-configer-xxxx")]),e._v(": Community "),a("code",[e._v("Configer")])]),e._v(" "),a("li",[a("code",[e._v("@scope/vapper-configer-xxxx")]),e._v(": Community "),a("code",[e._v("Configer")])])])])},[],!1,null,null,null);t.default=o.exports}}]);